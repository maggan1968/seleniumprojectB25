Today's schedule:

- Review
- Actions practice
- JSExecutor practice

----------------------------------------------------------------------

- Driver utility:

- Why did we create driver utility?
1- We were typing too many lines just to instantiate our browser driver, and also to do setup (maximize windows, implicitly wait etc)
2- We were having hard time passing the same exact instance of our driver around in our project
    - from one test to another
    - from one method to another
    - from one class to another
    - from one package to another


- How did we solve our driver passing issue?
- We implemented Singleton Design Pattern.

- What is a design pattern?
- A repeatable solution to a repeating issue/problem.

- What is Singleton Design Pattern?
- Singleton Design Pattern makes sure we are returning the same instance of our driver every time we call it regardless of where we call it from.
- It can be different package, different class, different method it will always return the same instance.


- How do we implement Singleton Design Pattern?

#1- Create private constructor to close access to the object of the class.
#2- Create a public static getter method to deliver the object in the way we want to deliver.


----------------------------------------------------------------------

- Actions:

- Why do we need Actions class?
- To handle "advanced" mouse and keyboard actions.
- Such as:
    - moveToElement
    - clickAndHold
    - dragAndDrop
    - contextClick (right click)
    - doubleClick
    - pause
    - perform
    - keyDown : imitates as if user presses a key from keyboard and holds it down
    - keyUp   : imitates as if user lets go (release) a key that is already used by keyDown method.

How do we create and use Actions object?

syntax:

#1- We create Actions class object
#2- We pass the driver instance into Actions class' constructor
#3- Now we can use the object for the methods coming from Actions class.
#4- We MUST use .perform() method at the end to perform our actions.


----------------------------------------------------------------------

JavascriptExecutor:

What is it?
- It is a simple interface coming from Selenium library that allows us to inject(pass) JavaScript methods(functions) into our Java-Selenium code.

Why do we need it?
- Because JavaScript is a very strong web-development programming language.
- Therefore it is useful to be able to pass JavaScript code in our Java-Selenium code in certain situations.

How do we use JavascriptExecutor?
1- We need to downcast our driver type to JavascriptExecutor interface
2- Now we can use the methods coming from JavascriptExecutor
3- We pass our Javascript methods into .executeScript method which will apply it in our driver session.


----------------------------------------------------------------------


